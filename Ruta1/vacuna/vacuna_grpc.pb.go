// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vacuna

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VacunaServiceClient is the client API for VacunaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VacunaServiceClient interface {
	AgregarRegistro(ctx context.Context, in *Registro, opts ...grpc.CallOption) (*Respuesta, error)
}

type vacunaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVacunaServiceClient(cc grpc.ClientConnInterface) VacunaServiceClient {
	return &vacunaServiceClient{cc}
}

func (c *vacunaServiceClient) AgregarRegistro(ctx context.Context, in *Registro, opts ...grpc.CallOption) (*Respuesta, error) {
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, "/grpc.VacunaService/AgregarRegistro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VacunaServiceServer is the server API for VacunaService service.
// All implementations must embed UnimplementedVacunaServiceServer
// for forward compatibility
type VacunaServiceServer interface {
	AgregarRegistro(context.Context, *Registro) (*Respuesta, error)
	mustEmbedUnimplementedVacunaServiceServer()
}

// UnimplementedVacunaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVacunaServiceServer struct {
}

func (UnimplementedVacunaServiceServer) AgregarRegistro(context.Context, *Registro) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarRegistro not implemented")
}
func (UnimplementedVacunaServiceServer) mustEmbedUnimplementedVacunaServiceServer() {}

// UnsafeVacunaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VacunaServiceServer will
// result in compilation errors.
type UnsafeVacunaServiceServer interface {
	mustEmbedUnimplementedVacunaServiceServer()
}

func RegisterVacunaServiceServer(s grpc.ServiceRegistrar, srv VacunaServiceServer) {
	s.RegisterService(&VacunaService_ServiceDesc, srv)
}

func _VacunaService_AgregarRegistro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacunaServiceServer).AgregarRegistro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.VacunaService/AgregarRegistro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacunaServiceServer).AgregarRegistro(ctx, req.(*Registro))
	}
	return interceptor(ctx, in, info, handler)
}

// VacunaService_ServiceDesc is the grpc.ServiceDesc for VacunaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VacunaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.VacunaService",
	HandlerType: (*VacunaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AgregarRegistro",
			Handler:    _VacunaService_AgregarRegistro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vacuna.proto",
}
